#!/usr/bin/env bash
#
#
set -u -e -o pipefail

case "$*" in
  "-h"|"--help"|"help")
    echo "$0 -h|--help|help -- Show this message."
    echo "$0 serve"
    echo "$0 build dev|prod"
    echo "$0 build watch"
    echo "$0 build dir"
    echo "$0 build css [SECTION-NAME]"
    echo "$0 section new [SECTION-NAME]"
    echo "$0 upload"
    echo "$0 upgrade"
    echo
    ;;

  "serve")
    # bunx wrangler dev
    export IS_DEV='YES'
    secrets JAKI_DEV bun run --hot src/worker.js
    ;;

  "build watch")
    content=""
    while read -r LINE ; do
      echo "--- $LINE"
      filename="$(echo "$LINE" | cut -d' ' -f3-)"
      dir="$(echo "$LINE" | cut -d' ' -f1)"
      file="$dir$filename"
      case "$file" in
        *.css|*.html|*.js)
          new_content="$(cat "$file")"
          if ! test "$new_content" == "$content" ; then
            echo "--- $file"
            "$0" build
            content="$new_content"
          else
            echo "skipping: $file"
          fi
          ;;
      esac
    done < <(inotifywait -r -m -e MODIFY public)
    ;;

  "build dir")
    set -x
    cd "$(dirname "$0")"/..
    rm -rf build
    mkdir build
    cp -r public build/
    ;;

  "build dev")
    IS_DEV=YES "$0" __build
    ;;

  "build prod")
    IS_DEV='' "$0" __build
    ;;

  __build)
    case "$IS_DEV" in
      yes|YES|IS_DEV)
        echo "--- Building for development..." >&2
        ;;
      *)
        echo "--- Building for production..." >&2
        export IS_DEV=""
        ;;
    esac
    this_bin="$(realpath "$0")"
    cd "$(dirname "$0")"/..
    this_project="$PWD"

    echo "--- in $PWD" >&2
    "$this_bin" build dir
    "$this_bin" download pure.css

    cd build

    echo "=== Writing file manifest..."
    www write file manifest

    while read -r LINE ; do
      case "$LINE" in
        *section/base*) : ;;
        *.css)
          echo "--- Processing .css: $LINE"
          set -x
          bun x lightningcss --minify --bundle "$LINE" -o "$LINE".tmp
          set +x
          mv "$LINE".tmp "$LINE"
          ;;
        *.html.mts)
          new_file=${LINE/.html.mts/.html}
          echo "--- Writing: $new_file"
          bun run "$LINE" > "$new_file"
          rm "$LINE"
          ;;
      esac
    done < <( find public/section -maxdepth 2 -mindepth 2 -type f -iname '*.css' -or -iname '*.html.mts')

    set -x
    index_mts=$( find public/section -maxdepth 2 -mindepth 2 -type f -iname index.mts)
    bun build \
      --target browser \
      --outdir "$PWD"/public/section \
      --splitting \
      --entry-naming "[dir]/[name].mjs" \
      $index_mts
    rm $index_mts
    set +x

    # www build mjs
    echo "=== Done building. ===" >&2
    echo
    ;;

  "build css "*)
    if ! test -e build ; then
      "$0" build dir
    fi
    section="$3"
    echo "=== Compiling section: $section"
    set -x
    cd build/public/section/"$section"
    bunx lightningcss --minify --bundle main.css -o tmp.main.css
    mv -f tmp.main.css main.css
    ;;

  "download pure.css")
    set -x
    cd public/styles
    wget -O pure.css "https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/base-min.css"
    wget -O pure-grids.css "https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/grids-responsive-min.css"
    wget -O reset.css "https://meyerweb.com/eric/tools/css/reset/reset.css"
    ;;

  "section new "*)
    new_name="$3"

    new_dir=public/section/"$new_name"
    mkdir -p "$new_dir"
    for x in index.html index.mts index.css ; do
      if ! test -f "$new_dir"/"$x" ; then
        cp templates/"$x" "$new_dir"/"$x"
      fi
    done
    tree "$new_dir"
    ;;

  "upload")
    www setup bucket
    www write file manifest
    www upload to bucket
    ;;

  upgrade)
    bun update
    "$0" download pure.css
    ;;
  *)
    echo "!!! Unknown command: $*" >&2
    exit 1
    ;;
esac
