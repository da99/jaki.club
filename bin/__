#!/usr/bin/env bash
#
#
set -u -e -o pipefail

validate_build_target () {
  case "$BUILD_TARGET" in
    production|stage|dev)
      :
      ;;
    *)
      echo "!!! Invalid BUILD_TARGET: $BUILD_TARGET" >&2
      exit 2
      ;;
  esac
}

case "$*" in
  "stage "*)
    export BUILD_TARGET="stage"
    ;;
  "dev "*)
    export BUILD_TARGET="dev"
    ;;
  "prod "*|"production "*)
    export BUILD_TARGET="production"
    ;;
esac

case "$*" in
  # doc: CMD -h|--help|help -- Show this message.
  "-h"|"--help"|"help")
    CMD=__ da string doc "$0"
    ;;

  # doc: CMD production deploy
  "production deploy")
    shift
    target="$1"
    shift
    set -x
    bun x wrangler deploy --env "$target" "$@"
    ;;

  # doc: CMD serve static|dev
  "serve static")
    settings="$(cat settings.json)"
    static_port="$(echo "$settings" | jq --raw-output .STATIC_PORT)"
    static_dir="$(echo "$settings" | jq --raw-output .STATIC_DIR)"
    build_dir="$(echo "$settings" | jq --raw-output .BUILD_DIR)"
    set -x
    da www serve "$static_port" "$build_dir"/"$static_dir" "$0" build dev
    ;;

  "serve dev")
    shift; shift
    # bunx wrangler dev
    # IS_DEV='YES' secrets JAKI_DEV bun run --hot src/worker.js
    dev_port="$(jq --raw-output .DEV_PORT < settings.json)"
    set -x
    bun x wrangler dev --env dev --port "$dev_port" "$@"
    ;;

  "build watch")
    content=""
    while read -r LINE ; do
      echo "--- $LINE"
      filename="$(echo "$LINE" | cut -d' ' -f3-)"
      dir="$(echo "$LINE" | cut -d' ' -f1)"
      file="$dir$filename"
      case "$file" in
        *.css|*.html|*.js)
          new_content="$(cat "$file")"
          if ! test "$new_content" == "$content" ; then
            echo "--- $file"
            "$0" build
            content="$new_content"
          else
            echo "skipping: $file"
          fi
          ;;
      esac
    done < <(inotifywait -r -m -e MODIFY public)
    ;;

  # doc: build dir
  "build dir")
    set -x
    cd "$(dirname "$0")"/..
    rm -rf build
    cp -r public build
    ;;

  #doc: BUILD_TARGET="..." CMD build
  build)
    validate_build_target
    echo "--- Building for: ${BUILD_TARGET} ---" >&2
    this_bin="$(realpath "$0")"
    cd "$(dirname "$0")"/..

    echo "--- in $PWD" >&2
    "$this_bin" build dir
    # "$this_bin" download pure.css

    da www update raw file manifest

    cd build

    echo "=== Building css"
    da www build css

    echo "=== Building .mjs scripts"
    da www build mjs


    echo "=== Updating file manifest..."
    cd ..
    da www update file manifest
    cd build

    echo "=== Building html"
    da www build html

    echo "=== Updating file manifest to remove transitional files..."
    cd ..
    da www update file manifest

    echo "=== Done building. ===" >&2
    echo
    ;;

  "download pure.css")
    set -x
    cd public/styles
    wget -O pure.css "https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/base-min.css"
    wget -O pure-grids.css "https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/grids-responsive-min.css"
    wget -O reset.css "https://meyerweb.com/eric/tools/css/reset/reset.css"
    ;;

  # doc: section new [SECTION-NAME]
  "section new "*)
    new_name="$3"

    new_dir=public/section/"$new_name"
    mkdir -p "$new_dir"
    for x in index.html index.mts index.css ; do
      if ! test -f "$new_dir"/"$x" ; then
        cp templates/"$x" "$new_dir"/"$x"
      fi
    done
    tree "$new_dir"
    ;;

  # doc: upgrade
  upgrade)
    bun update
    "$0" download pure.css
    ;;

  # doc: prune files
  "prune files")
    set -x
    secrets JAKI_DEV da www "$@"
    ;;

  # doc: CMD stage up
  "stage up")
    set -x
    "$0" stage public upload
    bun x wrangler deploy --env "stage"
    ;;


  # =============================================================================
  # doc: CMD stage db setup|drop
  "stage db setup")
    set -x
    npx wrangler d1 execute db-stage --env stage --remote --file=./d1/setup.sql
    ;;

  "stage db drop")
    set -x
    npx wrangler d1 execute login-code-db --env stage --local --command="DROP TABLE IF EXISTS email;"
    npx wrangler d1 execute login-code-db --env stage --local --command="DROP TABLE IF EXISTS login_codes;"
    npx wrangler d1 execute login-code-db --env stage --local --command="DROP TABLE IF EXISTS sessions;"
    ;;
  # =============================================================================

  # doc: CMD stage public upload (list)
  "stage public upload")
    "$0" build
    secrets jaki.club s3api list-objects > tmp/public_files_uploaded.json
    da www public upload
    ;;

  "stage public upload list")
    "$0" build
    secrets jaki.club s3api list-objects > tmp/public_files_uploaded.json
    BUILD_TARGET=stage da www public upload list
    ;;

  # doc: dev db setup|drop|reset|inspect
  "dev db setup")
    set -x
    npx wrangler d1 execute login-code-db --env dev --local --file=./d1/setup.sql
    ;;

  "dev db drop")
    set -x
    npx wrangler d1 execute login-code-db --env dev --local --command="DROP TABLE IF EXISTS email;"
    npx wrangler d1 execute login-code-db --env dev --local --command="DROP TABLE IF EXISTS login_codes;"
    npx wrangler d1 execute login-code-db --env dev --local --command="DROP TABLE IF EXISTS sessions;"
    ;;

  "dev db reset")
    set -x
    "$0" db drop
    "$0" db setup
    ;;

  "dev db inspect")
    set -x
    npx wrangler d1 execute login-code-db --env dev --local --command="SELECT * from email;"
    npx wrangler d1 execute login-code-db --env dev --local --command="SELECT * from login_codes;"
    npx wrangler d1 execute login-code-db --env dev --local --command="SELECT * from sessions;"
    ;;

  *)
    echo "!!! Unknown command: $*" >&2
    exit 1
    ;;
esac
