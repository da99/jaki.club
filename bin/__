#!/usr/bin/env bash
#
#
set -u -e -o pipefail

validate_build_target () {
  case "$BUILD_TARGET" in
    production|stage|dev)
      :
      ;;
    *)
      echo "!!! Invalid BUILD_TARGET: $BUILD_TARGET" >&2
      exit 2
      ;;
  esac
}

case "$*" in
  "stage "*)
    export BUILD_TARGET="stage"
    ;;
  "dev "*)
    export BUILD_TARGET="dev"
    ;;
  "prod "*|"production "*)
    export BUILD_TARGET="production"
    ;;
esac

case "$*" in
  # doc: CMD -h|--help|help -- Show this message.
  "-h"|"--help"|"help")
    CMD=__ da string doc "$0"
    ;;

  # doc: CMD setup
  setup)
    bun install --save-dev \
      lightningcss \
      wrangler \
      @cloudflare/workers-types \
      @types/bun \
      hono hono-sessions
    ;;

  # doc: CMD build settings
  # doc: CMD settings get KEY
  "build settings")
    NO_COLOR=1 bin/settings.mts build > tmp/settings.json
    cat tmp/settings.json
    ;;

  "settings get "*)
    shift
    NO_COLOR=1 bin/settings.mts "$@"
    ;;

  # doc: CMD production deploy
  "production deploy")
    shift
    target="$1"
    shift
    set -x
    bun x wrangler deploy --env "$target" "$@"
    ;;

  "build watch")
    content=""
    while read -r LINE ; do
      echo "--- $LINE"
      filename="$(echo "$LINE" | cut -d' ' -f3-)"
      dir="$(echo "$LINE" | cut -d' ' -f1)"
      file="$dir$filename"
      case "$file" in
        *.css|*.html|*.js)
          new_content="$(cat "$file")"
          if ! test "$new_content" == "$content" ; then
            echo "--- $file"
            "$0" build
            content="$new_content"
          else
            echo "skipping: $file"
          fi
          ;;
      esac
    done < <(inotifywait -r -m -e MODIFY public)
    ;;

  # doc: CMD build dir
  "build dir")
    set -x
    cd "$(dirname "$0")"/..
    rm -rf build
    cp --archive public build
    ;;

  # doc: CMD build
  build)
    this_bin="$(realpath "$0")"
    cd "$(dirname "$0")"/..
    echo "--- in $PWD" >&2

    "$0" build settings
    echo
    echo "--- Building for: $( "$0" settings get SITE_NAME ) ---" >&2

    "$this_bin" build dir
    # "$this_bin" download pure.css

    www static build

    exit 0
    # da www update raw file manifest

    echo "=== Building css"
    da www build css

    echo "=== Building .mjs scripts"
    da www build mjs

    echo "=== Updating file manifest..."
    da www update file manifest

    echo "=== Building html"
    da www build html

    echo "=== Updating file manifest to remove transitional files..."
    da www update file manifest

    echo "=== Done building. ===" >&2
    echo
    ;;

  "build custom "*)
    shift; shift
    set -x
    "$(hostname)" "$@" "$0" build
    ;;

  "download pure.css")
    set -x
    cd public/styles
    wget -O pure.css "https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/base-min.css"
    wget -O pure-grids.css "https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/grids-responsive-min.css"
    wget -O reset.css "https://meyerweb.com/eric/tools/css/reset/reset.css"
    ;;

  # doc: CMD section new [SECTION-NAME]
  "section new "*)
    new_name="$3"

    new_dir=public/section/"$new_name"
    mkdir -p "$new_dir"
    for x in index.html.rb index.mts index.css ; do
      if ! test -f "$new_dir"/"$x" ; then
        cp templates/"$x" "$new_dir"/"$x"
        sed -i 's/{YEAR}/'"$(date +%Y)"'/g'  "$new_dir"/"$x"
        sed -i 's/{NAME}/'"$new_name"'/g'  "$new_dir"/"$x"
        echo "--- Wrote: $new_dir/$x"
      fi
    done
    tree "$new_dir"
    ;;

  # doc: CMD upgrade
  upgrade)
    bun update
    "$0" download pure.css
    ;;

  # doc: CMD prune files
  "prune files")
    set -x
    secrets JAKI_DEV da www "$@"
    ;;

  # =============================================================================
  # doc: CMD stage deploy (now)
  "stage deploy")
    set -x
    "$0" stage public upload
    "$0" stage deploy now
    ;;

  "stage deploy now")
    set -x
    bun x wrangler deploy --env "stage"
    ;;

  # doc: CMD stage db setup|drop|inspect|prune
  "stage db setup")
    set -x
    bun x wrangler d1 execute db-stage --env stage --local  --file=./d1/setup.sql
    bun x wrangler d1 execute db-stage --env stage --remote --file=./d1/setup.sql
    ;;

  "stage db drop")
    set -x
    for x in local remote ; do
      bun x wrangler d1 execute db-stage --env stage --"$x" --command="DROP TABLE IF EXISTS email;"
      bun x wrangler d1 execute db-stage --env stage --"$x" --command="DROP TABLE IF EXISTS login_codes;"
      bun x wrangler d1 execute db-stage --env stage --"$x" --command="DROP TABLE IF EXISTS sessions;"
    done
    ;;

  "stage db inspect")
    set -x
    for table in email login_codes ; do
      bun x wrangler d1 execute db-stage --env stage --remote --command="SELECT * FROM $table;"
    done
    ;;

  "stage db prune")
    set -x
    now_ts="$(date +%s)"
    time_limit="$(( 20 * 60 ))"
    bun x wrangler d1 execute db-stage --env stage --remote --command="DELETE FROM login_codes WHERE login_codes.date_created < '$(( now_ts - time_limit ))' ;"
    ;;

  # doc: CMD stage public upload (list)
  "stage public upload")
    "$0" build
    secrets jaki.club s3api list-objects > tmp/public_files_uploaded.json
    da www public upload
    ;;

  "stage public upload list")
    "$0" build
    secrets jaki.club s3api list-objects > tmp/public_files_uploaded.json
    da www public upload list
    ;;

  # doc: CMD stage tail
  "stage tail")
    set -x
    bun x wrangler tail -e stage
    ;;
  # =============================================================================
  # =============================================================================

  # =============================================================================
  # doc: CMD dev db setup|drop|reset|inspect
  "dev build")
  "$0" build
  ;;

  "dev db setup")
    set -x
    npx wrangler d1 execute login-code-db --env dev --local --file=./d1/setup.sql
    ;;

  "dev db drop")
    set -x
    npx wrangler d1 execute login-code-db --env dev --local --command="DROP TABLE IF EXISTS email;"
    npx wrangler d1 execute login-code-db --env dev --local --command="DROP TABLE IF EXISTS login_codes;"
    npx wrangler d1 execute login-code-db --env dev --local --command="DROP TABLE IF EXISTS sessions;"
    ;;

  "dev db reset")
    set -x
    "$0" db drop
    "$0" db setup
    ;;

  "dev db inspect")
    set -x
    npx wrangler d1 execute login-code-db --env dev --local --command="SELECT * from email;"
    npx wrangler d1 execute login-code-db --env dev --local --command="SELECT * from login_codes;"
    npx wrangler d1 execute login-code-db --env dev --local --command="SELECT * from sessions;"
    ;;

  # doc: CMD dev static
  "dev static")
    set -x
    da www serve # "$0" build dev
    ;;

  # doc: CMD dev serve
  "dev serve")
    shift; shift
    # bunx wrangler dev
    # IS_DEV='YES' secrets JAKI_DEV bun run --hot src/worker.js
    dev_port="$(jq --raw-output .DEV_PORT < settings.json)"
    set -x
    bun x wrangler dev --live-reload false --env dev --port "$dev_port" "$@"
    ;;
  # =============================================================================
  # =============================================================================

  "dev build file "*)
  set -x
  exec da www build file "$4"
  ;;

  *)
    echo "!!! Unknown command: $*" >&2
    exit 1
    ;;
esac
